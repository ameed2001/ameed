// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enum Types from SQL
enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  DELETED
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

// Table Models from SQL
model User {
  id             String        @id @default(uuid())
  name           String
  email          String        @unique
  passwordHash   String        @map("password_hash")
  role           UserRole
  status         UserStatus    @default(ACTIVE)
  phone          String?
  profileImage   String?       @map("profile_image")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")

  ownedProjects  Project[]     @relation("ProjectOwner")
  projectUsers   ProjectUser[] // Changed from 'projects' to 'projectUsers' for clarity
  comments       Comment[]
  resetTokens    PasswordResetToken[]
  logs           LogEntry[]

  @@map("users")
}

model SystemSettings {
  id                          Int      @id @default(autoincrement())
  siteName                    String   @map("site_name")
  defaultLanguage             String   @default("ar") @map("default_language")
  maintenanceMode             Boolean  @default(false) @map("maintenance_mode")
  maxUploadSizeMb             Int      @default(25) @map("max_upload_size_mb")
  emailNotificationsEnabled   Boolean  @default(true) @map("email_notifications_enabled")
  engineerApprovalRequired    Boolean  @default(true) @map("engineer_approval_required")

  @@map("system_settings")
}

model Project {
  id               String        @id @default(uuid())
  name             String
  description      String?       @db.Text
  location         String?
  startDate        DateTime?     @map("start_date")
  endDate          DateTime?     @map("end_date")
  budget           Float?        // Prisma uses Float for DECIMAL by default with PG
  status           ProjectStatus @default(PLANNED)
  overallProgress  Int           @default(0) @map("overall_progress")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  ownerId          String?       @map("owner_id")
  owner            User?         @relation("ProjectOwner", fields: [ownerId], references: [id])

  projectUsers     ProjectUser[]
  stages           ProjectStage[]
  tasks            Task[]        @relation("ProjectTasks") // Explicit relation name
  materials        Material[]
  quantityReports  QuantityReport[]
  progressUpdates  ProgressUpdate[]
  photos           ProjectPhoto[] @relation("ProjectPhotosDirect") // Explicit relation name
  comments         Comment[]     @relation("ProjectComments")
  documents        Document[]

  @@map("projects")
}

model ProjectUser {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  projectId String   @map("project_id")
  role      String   // As per SQL: VARCHAR(50)

  user      User     @relation(fields: [userId], references: [id])
  project   Project  @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_users")
}

model ProjectStage {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  progress    Int       @default(0)
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id])
  tasks       Task[]    @relation("StageTasks") // Explicit relation name

  @@map("project_stages")
}

model Task {
  id          String     @id @default(uuid())
  name        String
  description String?    @db.Text
  startDate   DateTime?  @map("start_date")
  endDate     DateTime?  @map("end_date")
  status      TaskStatus @default(NOT_STARTED)
  progress    Int        @default(0)

  stageId     String     @map("stage_id")
  stage       ProjectStage @relation("StageTasks", fields: [stageId], references: [id])

  projectId   String     @map("project_id")
  project     Project    @relation("ProjectTasks", fields: [projectId], references: [id])

  materials   Material[]
  comments    Comment[]  @relation("TaskComments")
  photos      ProjectPhoto[] @relation("TaskPhotos") // Added based on project_photos table having task_id

  @@map("tasks")
}

model Material {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text
  unit        String
  quantity    Float?
  unitPrice   Float?  @map("unit_price")
  totalCost   Float?  @map("total_cost")

  taskId      String? @map("task_id")
  task        Task?   @relation(fields: [taskId], references: [id])

  stageId     String? @map("stage_id") // Made nullable based on SQL schema for materials table
  stage       ProjectStage? @relation(fields: [stageId], references: [id])


  projectId   String  @map("project_id")
  project     Project @relation(fields: [projectId], references: [id])

  @@map("materials")
}

model QuantityReport {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  reportDate  DateTime  @default(now()) @map("report_date")
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id])
  fileUrl     String?   @map("file_url")
  items       QuantityReportItem[]

  @@map("quantity_reports")
}

model QuantityReportItem {
  id              String   @id @default(uuid())
  materialName    String   @map("material_name")
  unit            String
  plannedQuantity Float    @map("planned_quantity")
  actualQuantity  Float    @map("actual_quantity")
  variance        Float
  reportId        String   @map("report_id")
  report          QuantityReport @relation(fields: [reportId], references: [id])

  @@map("quantity_report_items")
}

model ProgressUpdate {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  progress    Int
  date        DateTime  @default(now())
  projectId   String    @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id])
  photos      ProjectPhoto[] @relation("UpdatePhotos")
  comments    Comment[]      @relation("UpdateComments")


  @@map("progress_updates")
}

model ProjectPhoto {
  id               String   @id @default(uuid())
  url              String
  caption          String?  @db.Text
  uploadDate       DateTime @default(now()) @map("upload_date")

  projectId        String?  @map("project_id")
  project          Project? @relation("ProjectPhotosDirect", fields: [projectId], references: [id])

  progressUpdateId String?  @map("progress_update_id")
  progressUpdate   ProgressUpdate? @relation("UpdatePhotos", fields: [progressUpdateId], references: [id])

  taskId           String?  @map("task_id")
  task             Task?    @relation("TaskPhotos", fields: [taskId], references: [id])


  @@map("project_photos")
}

model Comment {
  id        String   @id @default(uuid())
  text      String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  projectId String?  @map("project_id")
  project   Project? @relation("ProjectComments", fields: [projectId], references: [id])

  taskId    String?  @map("task_id")
  task      Task?    @relation("TaskComments", fields: [taskId], references: [id])

  updateId  String?  @map("update_id") // SQL uses update_id
  update    ProgressUpdate? @relation("UpdateComments", fields: [updateId], references: [id])


  @@map("comments")
}

model Document {
  id          String   @id @default(uuid())
  name        String
  description String?  @db.Text
  url         String
  uploadDate  DateTime @default(now()) @map("upload_date")
  projectId   String   @map("project_id")
  project     Project  @relation(fields: [projectId], references: [id])

  @@map("documents")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model LogEntry {
  id         String   @id @default(uuid())
  action     String
  level      LogLevel
  message    String   @db.Text
  ipAddress  String?  @map("ip_address")
  userAgent  String?  @db.Text @map("user_agent")
  createdAt  DateTime @default(now()) @map("created_at")
  userId     String?  @map("user_id")
  user       User?    @relation(fields: [userId], references: [id])

  @@map("logs")
}
