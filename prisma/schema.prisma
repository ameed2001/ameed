// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id             String      @id @default(uuid())
  name           String
  email          String      @unique
  passwordHash   String      @map("password_hash")
  role           UserRole    @default(OWNER)
  status         UserStatus  @default(ACTIVE)
  createdAt      DateTime    @default(now())
  phone          String?
  profileImage   String?

  ownedProjects  Project[]   @relation("OwnerProjects")
  engineeredProjects Project[] @relation("EngineerProjects")
  logs           LogEntry[]

  @@map("users")
}

enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
}

// Project Model
model Project {
  id                Int                  @id @default(autoincrement())
  name              String
  engineerId        String?
  ownerId           String?
  engineerName      String? // Storing as string for simplicity from mock, could be derived from relation
  clientName        String?
  status            ProjectStatusType    @default(PLANNED)
  startDate         String? // Storing as String based on mock-db, consider DateTime if calculations needed
  endDate           String? // Storing as String based on mock-db
  linkedOwnerEmail  String?              @unique // Assuming one project per owner email for linking simplicity
  description       String?              @db.Text
  location          String?
  budget            Float?               @db.DoublePrecision // Use Float for monetary values
  overallProgress   Int?                 @default(0)
  quantitySummary   String?              @db.Text
  
  photos            ProjectPhoto[]
  timelineTasks     ProjectTimelineTask[]
  comments          ProjectComment[]

  owner             User?                @relation("OwnerProjects", fields: [ownerId], references: [id], onDelete: SetNull)
  engineer          User?                @relation("EngineerProjects", fields: [engineerId], references: [id], onDelete: SetNull)

  @@map("projects")
}

enum ProjectStatusType {
  COMPLETED     @map("مكتمل")
  IN_PROGRESS   @map("قيد التنفيذ")
  PLANNED       @map("مخطط له")
  ARCHIVED      @map("مؤرشف")
}

// ProjectPhoto Model
model ProjectPhoto {
  id           String    @id @default(uuid())
  src          String
  alt          String
  caption      String?
  dataAiHint   String?   @map("data_ai_hint")
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_photos")
}

// ProjectTimelineTask Model
model ProjectTimelineTask {
  id           String    @id @default(uuid())
  name         String
  startDate    String    // Storing as String based on mock-db
  endDate      String    // Storing as String based on mock-db
  color        String
  status       TaskStatus @default(PLANNED)
  progress     Int?
  projectId    Int
  project      Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_timeline_tasks")
}

enum TaskStatus {
  COMPLETED     @map("مكتمل")
  IN_PROGRESS   @map("قيد التنفيذ")
  PLANNED       @map("مخطط له")
}

// ProjectComment Model
model ProjectComment {
  id                String    @id @default(uuid())
  userDisplay       String    @map("user_display_name") // Name of the user who commented
  text              String    @db.Text
  date              DateTime  // Using DateTime for proper date handling
  avatar            String?
  dataAiHintAvatar  String?   @map("data_ai_hint_avatar")
  projectId         Int
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  // Optional: Link to actual User model if comments are by registered users
  // userId         String?
  // commentingUser User?   @relation("UserComments", fields: [userId], references: [id])

  @@map("project_comments")
}

// SystemSettings Model (Single row table)
model SystemSettings {
  id                          Int      @id @default(1) // Fixed ID for single row
  siteName                    String   @default("المحترف لحساب الكميات")
  defaultLanguage             String   @default("ar")
  maintenanceMode             Boolean  @default(false)
  maxUploadSizeMB             Int      @default(25)
  emailNotificationsEnabled   Boolean  @default(true)
  engineerApprovalRequired    Boolean  @default(true)

  @@map("system_settings")
}

// LogEntry Model
model LogEntry {
  id           String     @id @default(uuid())
  timestamp    DateTime   @default(now())
  level        LogLevel
  message      String     @db.Text
  userId       String?    // Link to User who performed the action
  user         User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  ipAddress    String?    @map("ip_address")
  action       String?

  @@map("logs")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

// UseCase Model (Static data, can be seeded)
model UseCase {
  id          Int      @id @default(autoincrement())
  title       String
  role        UserRole // Maps to UserRole enum
  description String   @db.Text
  dependsOn   Int[]    @map("depends_on") // Array of integers for dependencies

  @@map("use_cases")
}
