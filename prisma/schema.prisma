// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Added debian-openssl-3.0.x
}

// أنواع الأدوار والصلاحيات
enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  DELETED
}

// نموذج المستخدم
model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  passwordHash   String       @map("password_hash")
  role           UserRole
  status         UserStatus   @default(ACTIVE)
  phone          String?
  profileImage   String?      @map("profile_image")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")

  // العلاقات
  ownedProjects  Project[]    @relation("ProjectOwner")
  projects       ProjectUser[]
  comments       Comment[]
  resetTokens    PasswordResetToken[]
  logs           LogEntry[]

  @@map("users")
}

// نموذج المشروع
model Project {
  id               String      @id @default(uuid())
  name             String
  description      String?
  location         String?
  startDate        DateTime?   @map("start_date")
  endDate          DateTime?   @map("end_date")
  budget           Float?
  status           ProjectStatus
  overallProgress  Int         @default(0) @map("overall_progress")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")

  // العلاقات
  owner            User?       @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId          String?     @map("owner_id")
  projectUsers     ProjectUser[]
  stages           ProjectStage[]
  tasks            Task[]
  materials        Material[]
  quantityReports  QuantityReport[]
  progressUpdates  ProgressUpdate[]
  photos           ProjectPhoto[]
  comments         Comment[]
  documents        Document[]

  @@map("projects")
}

// حالة المشروع
enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  ARCHIVED
}

// علاقة المستخدم بالمشروع (للمهندسين)
model ProjectUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id")
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String   @map("project_id")
  role      String   // يمكن أن تكون أدوار إضافية داخل المشروع

  @@unique([userId, projectId])
  @@map("project_users")
}

// مراحل المشروع
model ProjectStage {
  id          String    @id @default(uuid())
  name        String
  description String?
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  progress    Int       @default(0)
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map("project_id")
  tasks       Task[]

  @@map("project_stages")
}

// المهام
model Task {
  id          String       @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?    @map("start_date")
  endDate     DateTime?    @map("end_date")
  status      TaskStatus   @default(NOT_STARTED)
  progress    Int          @default(0)
  stage       ProjectStage @relation(fields: [stageId], references: [id])
  stageId     String       @map("stage_id")
  project     Project      @relation(fields: [projectId], references: [id])
  projectId   String       @map("project_id")
  materials   Material[]
  comments    Comment[]
  photos      ProjectPhoto[] // Added relation to ProjectPhoto

  @@map("tasks")
}

// حالة المهمة
enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

// المواد
model Material {
  id          String    @id @default(uuid())
  name        String
  description String?
  unit        String
  quantity    Float
  unitPrice   Float     @map("unit_price")
  totalCost   Float     @map("total_cost")
  task        Task?     @relation(fields: [taskId], references: [id])
  taskId      String?   @map("task_id")
  stageId     String?   @map("stage_id") // This field was missing relation in original user schema. Assuming it relates to ProjectStage.
  // If it should relate to ProjectStage, the relation would be:
  // stage       ProjectStage? @relation(fields: [stageId], references: [id]) 
  // For now, keeping it as String? as per original schema, if it was just a loose ID.
  // However, typical design would be a relation.
  // Corrected to relate to ProjectStage.
  stage       ProjectStage? @relation("StageMaterials", fields: [stageId], references: [id])

  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map("project_id")

  @@map("materials")
}


// تقارير الكميات
model QuantityReport {
  id          String    @id @default(uuid())
  name        String
  description String?
  reportDate  DateTime  @default(now()) @map("report_date")
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map("project_id")
  items       QuantityReportItem[]
  fileUrl     String?   @map("file_url")

  @@map("quantity_reports")
}

// عناصر تقرير الكميات
model QuantityReportItem {
  id               String         @id @default(uuid())
  materialName     String         @map("material_name")
  unit             String
  plannedQuantity  Float          @map("planned_quantity")
  actualQuantity   Float          @map("actual_quantity")
  variance         Float
  report           QuantityReport @relation(fields: [reportId], references: [id])
  reportId         String         @map("report_id")

  @@map("quantity_report_items")
}

// تحديثات التقدم
model ProgressUpdate {
  id          String    @id @default(uuid())
  title       String
  description String
  progress    Int
  date        DateTime  @default(now())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map("project_id")
  photos      ProjectPhoto[]
  comments    Comment[]

  @@map("progress_updates")
}

// صور المشروع
model ProjectPhoto {
  id               String         @id @default(uuid())
  url              String
  caption          String?
  uploadDate       DateTime       @default(now()) @map("upload_date")
  project          Project?       @relation(fields: [projectId], references: [id])
  projectId        String?        @map("project_id")
  progressUpdate   ProgressUpdate? @relation(fields: [progressUpdateId], references: [id])
  progressUpdateId String?        @map("progress_update_id")
  task             Task?          @relation(fields: [taskId], references: [id]) // Task now has photos ProjectPhoto[]
  taskId           String?        @map("task_id")

  @@map("project_photos")
}

// التعليقات
model Comment {
  id          String    @id @default(uuid())
  text        String
  createdAt   DateTime  @default(now()) @map("created_at")
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @map("user_id")
  project     Project?  @relation(fields: [projectId], references: [id])
  projectId   String?   @map("project_id")
  task        Task?     @relation(fields: [taskId], references: [id])
  taskId      String?   @map("task_id")
  update      ProgressUpdate? @relation(fields: [updateId], references: [id])
  updateId    String?   @map("update_id") // was update_id in user schema

  @@map("comments")
}

// المستندات
model Document {
  id          String    @id @default(uuid())
  name        String
  description String?
  url         String
  uploadDate  DateTime  @default(now()) @map("upload_date")
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String    @map("project_id")

  @@map("documents")
}

// إعادة تعيين كلمة المرور
model PasswordResetToken {
  id          String   @id @default(uuid())
  token       String   @unique
  expiresAt   DateTime @map("expires_at")
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@map("password_reset_tokens")
}

// إعدادات النظام
model SystemSettings {
  id                          Int      @id @default(autoincrement())
  siteName                    String   @map("site_name")
  defaultLanguage             String   @default("ar") @map("default_language")
  maintenanceMode             Boolean  @default(false) @map("maintenance_mode")
  maxUploadSizeMB             Int      @default(25) @map("max_upload_size_mb")
  emailNotificationsEnabled   Boolean  @default(true) @map("email_notifications_enabled")
  engineerApprovalRequired    Boolean  @default(true) @map("engineer_approval_required")

  @@map("system_settings")
}

// سجلات النظام
model LogEntry {
  id          String     @id @default(uuid())
  action      String
  level       LogLevel
  message     String
  ipAddress   String?    @map("ip_address")
  userAgent   String?    @map("user_agent")
  createdAt   DateTime   @default(now()) @map("created_at")
  user        User?      @relation(fields: [userId], references: [id])
  userId      String?    @map("user_id")

  @@map("logs") // was "log_entries" in my version, user had "logs"
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}
