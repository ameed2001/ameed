
// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// أنواع الأدوار والصلاحيات
enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  DELETED
}

// نموذج المستخدم
model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  passwordHash   String       @map("password_hash")
  role           UserRole
  status         UserStatus   @default(ACTIVE)
  phone          String?
  profileImage   String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // العلاقات
  ownedProjects  Project[]    @relation("ProjectOwner")
  projects       ProjectUser[]
  comments       Comment[]
  resetTokens    PasswordResetToken[]
  logs           LogEntry[]

  @@map("users")
}

// نموذج المشروع
model Project {
  id               String      @id @default(uuid())
  name             String
  description      String?     @db.Text
  location         String?
  startDate        DateTime?
  endDate          DateTime?
  budget           Float?
  status           ProjectStatus @default(PLANNED)
  overallProgress  Int         @default(0)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // العلاقات
  owner            User?       @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId          String?
  projectUsers     ProjectUser[]
  stages           ProjectStage[]
  tasks            Task[]      // Tasks directly under project, not belonging to a stage
  materials        Material[]
  quantityReports  QuantityReport[]
  progressUpdates  ProgressUpdate[]
  photos           ProjectPhoto[]
  comments         Comment[]
  documents        Document[]

  @@map("projects")
}

// حالة المشروع
enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  ARCHIVED
}

// علاقة المستخدم بالمشروع (للمهندسين وغيرهم من المشاركين)
model ProjectUser {
  id        String   @id @default(uuid())
  role      String   // مثل 'LEAD_ENGINEER', 'VIEWER', etc.
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@unique([userId, projectId])
  @@map("project_users")
}

// مراحل المشروع
model ProjectStage {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  startDate   DateTime?
  endDate     DateTime?
  progress    Int       @default(0)
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  tasks       Task[]    // Tasks belonging to this stage

  @@map("project_stages")
}

// المهام
model Task {
  id          String       @id @default(uuid())
  name        String
  description String?      @db.Text
  startDate   DateTime?
  endDate     DateTime?
  status      TaskStatus   @default(NOT_STARTED)
  progress    Int          @default(0)
  
  project     Project      @relation(fields: [projectId], references: [id], onDelete: Cascade) // Task must belong to a project
  projectId   String
  stage       ProjectStage? @relation(fields: [stageId], references: [id], onDelete: SetNull) // Task can optionally belong to a stage
  stageId     String?
  
  materials   Material[]
  comments    Comment[]
  photos      ProjectPhoto[] @relation("TaskPhotos")


  @@map("tasks")
}

// حالة المهمة
enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
  ON_HOLD
}

// المواد
model Material {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  unit        String    // e.g., m³, kg, piece
  quantity    Float
  unitPrice   Float?    // Price per unit
  totalCost   Float?    // Calculated: quantity * unitPrice
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  stage       ProjectStage? @relation(fields: [stageId], references: [id], onDelete: SetNull)
  stageId     String?
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: SetNull)
  taskId      String?

  @@map("materials")
}

// تقارير الكميات
model QuantityReport {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  reportDate  DateTime  @default(now())
  fileUrl     String?   // URL if the report is a generated file
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  items       QuantityReportItem[]

  @@map("quantity_reports")
}

// عناصر تقرير الكميات
model QuantityReportItem {
  id               String         @id @default(uuid())
  materialName     String
  unit             String
  plannedQuantity  Float
  actualQuantity   Float?
  variance         Float?         // Calculated: actualQuantity - plannedQuantity
  
  report           QuantityReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId         String

  @@map("quantity_report_items")
}

// تحديثات التقدم
model ProgressUpdate {
  id          String    @id @default(uuid())
  title       String
  description String    @db.Text
  progress    Int       // Percentage or a value indicating progress
  date        DateTime  @default(now())
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String
  photos      ProjectPhoto[] @relation("ProgressUpdatePhotos")
  comments    Comment[]

  @@map("progress_updates")
}

// صور المشروع/المهام/التحديثات
model ProjectPhoto {
  id               String         @id @default(uuid())
  url              String         @db.Text // Can be long for data URIs if used initially
  caption          String?
  uploadDate       DateTime       @default(now())
  dataAiHint       String?
  
  project          Project?       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String?
  progressUpdate   ProgressUpdate? @relation("ProgressUpdatePhotos", fields: [progressUpdateId], references: [id], onDelete: Cascade)
  progressUpdateId String?
  task             Task?          @relation("TaskPhotos", fields: [taskId], references: [id], onDelete: Cascade)
  taskId           String?

  @@map("project_photos")
}

// التعليقات
model Comment {
  id          String    @id @default(uuid())
  text        String    @db.Text
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  project     Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String?
  task        Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade) // Comment can be on a task
  taskId      String?
  update      ProgressUpdate? @relation(fields: [updateId], references: [id], onDelete: Cascade) // Comment can be on a progress update
  updateId    String?

  @@map("comments")
}

// المستندات
model Document {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  url         String    @db.Text // URL to the stored document
  fileType    String?   // e.g., "pdf", "docx"
  fileSizeKB  Int?      // Size in kilobytes
  uploadDate  DateTime  @default(now())
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId   String

  @@map("documents")
}

// إعادة تعيين كلمة المرور
model PasswordResetToken {
  id          String   @id @default(uuid())
  token       String   @unique
  expiresAt   DateTime
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String

  @@map("password_reset_tokens")
}

// إعدادات النظام (جدول بصف واحد عادةً)
model SystemSettings {
  id                          String   @id @default(uuid()) // Using UUID for consistency, though Int autoincrement is also fine for single row
  siteName                    String   @default("المحترف لحساب الكميات")
  defaultLanguage             String   @default("ar")
  maintenanceMode             Boolean  @default(false)
  maxUploadSizeMB             Int      @default(25)
  emailNotificationsEnabled   Boolean  @default(true)
  engineerApprovalRequired    Boolean  @default(true) // From your mock data
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt

  @@map("system_settings")
}

// سجلات النظام
model LogEntry {
  id          String     @id @default(uuid())
  action      String
  level       LogLevel
  message     String     @db.Text
  ipAddress   String?
  userAgent   String?    @db.Text
  createdAt   DateTime   @default(now())
  
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull) // If user deleted, log remains
  userId      String?

  @@map("logs")
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
  DEBUG
}

    