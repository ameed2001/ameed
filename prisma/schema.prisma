
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

enum UserRole {
  ADMIN
  ENGINEER
  OWNER
  GENERAL_USER
}

enum UserStatus {
  ACTIVE
  PENDING_APPROVAL
  SUSPENDED
  DELETED
}

enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DELAYED
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  SUCCESS
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String                @unique
  passwordHash         String
  role                 UserRole
  status               UserStatus            @default(ACTIVE)
  phone                String?
  profileImage         String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  ownedProjects        Project[]             @relation("OwnerProjects")
  projectAssignments   ProjectUser[]
  comments             Comment[]
  passwordResetTokens  PasswordResetToken[]
  logs                 LogEntry[]

  @@map("users")
}

model SystemSettings {
  id                         Int      @id @default(autoincrement())
  siteName                   String
  defaultLanguage            String   @default("ar")
  maintenanceMode            Boolean  @default(false)
  maxUploadSizeMb            Int      @default(25)
  emailNotificationsEnabled  Boolean  @default(true)
  engineerApprovalRequired Boolean  @default(true)

  @@map("system_settings")
}

model Project {
  id                String            @id @default(uuid())
  name              String
  description       String?
  location          String?
  startDate         DateTime?
  endDate           DateTime?
  budget            Decimal?          @db.Decimal(12, 2)
  status            ProjectStatus     @default(PLANNED)
  overallProgress   Int               @default(0)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  ownerId           String?
  owner             User?             @relation("OwnerProjects", fields: [ownerId], references: [id])
  assignedUsers     ProjectUser[]
  stages            ProjectStage[]
  tasks             Task[]            @relation("ProjectTasks")
  materials         Material[]        @relation("ProjectMaterials")
  quantityReports   QuantityReport[]
  progressUpdates   ProgressUpdate[]
  photos            ProjectPhoto[]    @relation("ProjectPhotos")
  comments          Comment[]         @relation("ProjectComments")
  documents         Document[]

  @@index([ownerId])
  @@map("projects")
}

model ProjectUser {
  id        String  @id @default(uuid())
  userId    String
  projectId String
  role      String? // Consider a more specific enum or restrict values
  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
  @@map("project_users")
}

model ProjectStage {
  id          String      @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  progress    Int         @default(0)
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id])
  tasks       Task[]
  materials   Material[]  @relation("StageMaterials")

  @@map("project_stages")
}

model Task {
  id          String      @id @default(uuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  status      TaskStatus  @default(NOT_STARTED)
  progress    Int         @default(0)
  stageId     String
  projectId   String
  stage       ProjectStage @relation(fields: [stageId], references: [id])
  project     Project     @relation("ProjectTasks", fields: [projectId], references: [id])
  materials   Material[]  @relation("TaskMaterials")
  photos      ProjectPhoto[] @relation("TaskPhotos")
  comments    Comment[]   @relation("TaskComments")

  @@index([projectId])
  @@map("tasks")
}

model Material {
  id          String        @id @default(uuid())
  name        String
  description String?
  unit        String?
  quantity    Decimal?      @db.Decimal(10, 2)
  unitPrice   Decimal?      @db.Decimal(10, 2)
  totalCost   Decimal?      @db.Decimal(10, 2)
  taskId      String?
  stageId     String?
  projectId   String
  task        Task?         @relation("TaskMaterials", fields: [taskId], references: [id])
  stage       ProjectStage? @relation("StageMaterials", fields: [stageId], references: [id])
  project     Project       @relation("ProjectMaterials", fields: [projectId], references: [id])

  @@index([projectId])
  @@map("materials")
}

model QuantityReport {
  id          String                @id @default(uuid())
  name        String
  description String?
  reportDate  DateTime              @default(now())
  projectId   String
  fileUrl     String?
  project     Project               @relation(fields: [projectId], references: [id])
  items       QuantityReportItem[]

  @@index([projectId])
  @@map("quantity_reports")
}

model QuantityReportItem {
  id              String          @id @default(uuid())
  materialName    String
  unit            String?
  plannedQuantity Decimal?        @db.Decimal(10, 2)
  actualQuantity  Decimal?        @db.Decimal(10, 2)
  variance        Decimal?        @db.Decimal(10, 2)
  reportId        String
  report          QuantityReport @relation(fields: [reportId], references: [id])

  @@map("quantity_report_items")
}

model ProgressUpdate {
  id          String    @id @default(uuid())
  title       String
  description String?
  progress    Int?
  date        DateTime  @default(now())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  photos      ProjectPhoto[] @relation("ProgressUpdatePhotos")
  comments    Comment[] @relation("ProgressUpdateComments")

  @@index([projectId])
  @@map("progress_updates")
}

model ProjectPhoto {
  id                String    @id @default(uuid())
  url               String
  caption           String?
  uploadDate        DateTime  @default(now())
  projectId         String?
  progressUpdateId  String?
  taskId            String?
  project           Project?  @relation("ProjectPhotos", fields: [projectId], references: [id])
  progressUpdate    ProgressUpdate? @relation("ProgressUpdatePhotos", fields: [progressUpdateId], references: [id])
  task              Task?     @relation("TaskPhotos", fields: [taskId], references: [id])

  @@index([projectId])
  @@map("project_photos")
}

model Comment {
  id        String    @id @default(uuid())
  text      String
  createdAt DateTime  @default(now())
  userId    String
  projectId String?
  taskId    String?
  updateId  String? // Corresponds to progress_update_id
  user      User      @relation(fields: [userId], references: [id])
  project   Project?  @relation("ProjectComments", fields: [projectId], references: [id])
  task      Task?     @relation("TaskComments", fields: [taskId], references: [id])
  progressUpdate ProgressUpdate? @relation("ProgressUpdateComments", fields: [updateId], references: [id])

  @@index([userId])
  @@index([projectId])
  @@map("comments")
}

model Document {
  id          String    @id @default(uuid())
  name        String
  description String?
  url         String
  uploadDate  DateTime  @default(now())
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@map("documents")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("password_reset_tokens")
}

model LogEntry {
  id          String   @id @default(uuid())
  action      String
  level       LogLevel
  message     String   @db.Text
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("logs")
}
